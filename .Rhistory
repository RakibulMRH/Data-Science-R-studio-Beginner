mydataframe <- read.csv(file, header = logical_value, sep = "delimiter")
mydata <- read.csv("E:\AIUB\INTRODUCTION TO DATA SCIENCE [C]\LAB\Data-Science-R-studio-Beginner/lab4.csv")
mydataframe <- read.csv(file, header = logical_value, sep = "delimiter")
mydata <- read.csv("E:\AIUB\INTRODUCTION TO DATA SCIENCE [C]\LAB\Data-Science-R-studio-Beginner/lab4.csv")
var1 = readline(prompt = "Enter any value: ")
mydata2 <- read.csv("E:\AIUB\INTRODUCTION TO DATA SCIENCE [C]\LAB\Data-Science-R-studio-Beginner/lab4.csv")
mydata2 <- read.csv("E:\AIUB\lab4.csv")
mydata3 <- read.csv("E:\AIUB\lab4.csv")
mydata3 <- read.csv("E:/AIUB/lab4.csv")
mydata3
mydata2 <- read.csv("E:/AIUB/lab4.csv")
mydata2
mydata2
# Define the gender factor vector
gender <- factor(c("Male", "Female"))  # You can add more levels as needed
# Add the gender column to mydata2
mydata2$gender <- gender
mydata2$gender <- factor(mydata2$gender,
level = c("Male", "Female"),
labels = c(1,2))
mydata2$gender <- factor(mydata2$gender,
level = c("Male", "Female","Male", "Female","Male", "Female","Male", "Female"),
labels = c(1,2))
mydata2$gender <- factor(mydata2$gender,
levels = c("Male", "Female"),
labels = c(1, 2))
mydata2$gender <- factor(mydata2$gender,
level = c("Male", "Female"),
labels = c(1,2))
mydata2 <- read.csv("E:/AIUB/lab4.csv")
# Define the gender factor vector
gender <- factor(c("Male", "Female"))  # You can add more levels as needed
# Add the gender column to mydata2
mydata2$gender <- factor(mydata2$gender,
level = c("Male", "Female"),
labels = c(1,2))
mydata2$gender <- factor(mydata2$gender,
levels = c("Male", "Female"),
labels = c(1,2))
mydata2 <- read.csv("E:/AIUB/lab4.csv")
mydata2$gender <- factor(mydata2$gender,
levels = c("Male", "Female"),
labels = c(1,2))
mydata2 <- cbind(mydata2,gender=gender)
mydata2 <- read.csv("E:/AIUB/lab4.csv")
mydata2 <- cbind(mydata2, Gender = Gender)
if (length(Gender) == num_rows) {
# Adding a new column "Gender" after "age" using cbind
mydata <- cbind(mydata, Gender = Gender)
# Print the updated data frame
print(mydata)
} else {
print("Number of rows in Gender does not match the data frame.")
}
Gender <- c("Male", "Female", "Male", "Male", "Female", "Male", "Female","Female","Male")
if (length(Gender) == num_rows) {
# Adding a new column "Gender" after "age" using cbind
mydata <- cbind(mydata, Gender = Gender)
# Print the updated data frame
print(mydata)
} else {
print("Number of rows in Gender does not match the data frame.")
}
Gender <- c("Male", "Female", "Male", "Male", "Female", "Male", "Female","Female","Male")
num_rows <- nrow(mydata)
Gender <- c("Male", "Female", "Male", "Male", "Female", "Male", "Female","Female","Male")
num_rows <- nrow(mydata)
Gender <- c("Male", "Female", "Male", "Male", "Female", "Male", "Female","Female","Male")
num_rows <- nrow(mydata2)
# Make sure the length of Gender matches the number of rows
if (length(Gender) == num_rows) {
# Adding a new column "Gender" after "age" using cbind
mydata2 <- cbind(mydata2, Gender = Gender)
# Print the updated data frame
print(mydata2)
} else {
print("Number of rows in Gender does not match the data frame.")
}
str(mydata2)
mydata2$Gender <- factor(mydata2$Gender,
levels = c("Male", "Female"),
labels = c(1,2))
mydata2
# Calculate the standard deviation of a specific column (e.g., attribute_column)
standard_deviation <- sd(mydata2$attribute_column)
# Print the standard deviation
print(standard_deviation)
standard_deviation <- sd(mydata2$Gender)
standard_deviation <- sd(mydata2$Gender)
standard_deviation2 <- sd(mydata2$Gender)
standard_deviation <- sd(mydata2$Borrower)
# Print the standard deviation
print(standard_deviation)
standard_deviation <- sd(mydata2$Loan)
print(standard_deviation)
mydata2 %>% summarise_if(is.numeric,sd)
install.packages("dplyr")
library("dplyr")
library('dplyr')
data_unchanged <- read.csv("E:/AIUB/Student Mental health.csv")
# Check for missing values
missing_values <- is.na(data)
missing_summary <- colSums(missing_values)
# Print the summary of missing values
print(missing_summary)
library('dplyr')
data_unchanged <- read.csv("E:/AIUB/Student Mental health.csv")
missing_summary
missing_summary <- colSums(missing_values)
library('dplyr')
data_unchanged <- read.csv("E:/AIUB/Student Mental health.csv")
# Check for missing values
missing_values <- is.na(data)
missing_summary <- colSums(missing_values)
# Print the summary of missing values
print(missing_summary)
View(data_unchanged)
library('dplyr')
data_unchanged <- read.csv("E:/AIUB/Student Mental health.csv")
# Check for missing values
missing_values <- is.na(data_unchanged)
missing_summary <- colSums(missing_values)
# Print the summary of missing values
print(missing_summary)
student_mental_health <- na.omit(data)
student_mental_health
# Print the summary of missing values
print(missing_summary)
student_mental_health <- na.omit(data_unchanged)
student_mental_health
View(student_mental_health)
View(student_mental_health)
missing_values <- is.na(student_mental_health)
missing_summary <- colSums(missing_values)
missing_summary
student_mental_health
data<-student_mental_health <- na.omit(data_unchanged)
# Install and load the 'FSelector' package if not already installed
# install.packages("FSelector")
library(FSelector)
# Install and load the 'FSelector' package if not already installed
# install.packages("FSelector")
library(FSelector)
# Install and load the 'FSelector' package if not already installed
# install.packages("FSelector")
library(FSelector)
library('dplyr')
data_unchanged <- read.csv("E:/AIUB/Student Mental health.csv")
missing_values <- is.na(data_unchanged)
missing_summary <- colSums(missing_values)
print(missing_summary)
data<-student_mental_health <- na.omit(data_unchanged)
# Assuming your dataset is loaded into a data frame called 'data'
# Install and load the 'FSelector' package if not already installed
# install.packages("FSelector")
library(FSelector)
library('dplyr')
data_unchanged <- read.csv("E:/AIUB/Student Mental health.csv")
missing_values <- is.na(data_unchanged)
missing_summary <- colSums(missing_values)
print(missing_summary)
data<-student_mental_health <- na.omit(data_unchanged)
# Assuming your dataset is loaded into a data frame called 'data'
# Install and load the 'FSelector' package if not already installed
# install.packages("FSelector")
library(FSelector)
